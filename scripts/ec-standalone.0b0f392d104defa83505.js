!function(e){function t(t){for(var o,s,i=t[0],a=t[1],c=t[2],d=0,f=[];d<i.length;d++)s=i[d],Object.prototype.hasOwnProperty.call(r,s)&&r[s]&&f.push(r[s][0]),r[s]=0;for(o in a)Object.prototype.hasOwnProperty.call(a,o)&&(e[o]=a[o]);for(u&&u(t);f.length;)f.shift()();return l.push.apply(l,c||[]),n()}function n(){for(var e,t=0;t<l.length;t++){for(var n=l[t],o=!0,i=1;i<n.length;i++){var a=n[i];0!==r[a]&&(o=!1)}o&&(l.splice(t--,1),e=s(s.s=n[0]))}return e}var o={},r={0:0},l=[];function s(t){if(o[t])return o[t].exports;var n=o[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=e,s.c=o,s.d=function(e,t,n){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(s.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)s.d(n,o,function(t){return e[t]}.bind(null,o));return n},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="/";var i=window.webpackJsonp=window.webpackJsonp||[],a=i.push.bind(i);i.push=t,i=i.slice();for(var c=0;c<i.length;c++)t(i[c]);var u=a;l.push([0,1]),n()}([function(e,t,n){e.exports=n(1)},function(e,t,n){"use strict";var o;Object.defineProperty(t,"__esModule",{value:!0});const r=n(2);n(3),n(4);const l=r.__importDefault(n(5));let s=document.getElementById("search-form");function i(){return r.__awaiter(this,void 0,void 0,(function*(){let e={};new FormData(s).forEach((t,n)=>{e[n]=t});try{const t="https://api.stackexchange.com/2.2/search/advanced?order=desc&sort=relevance&answers=1&filter=withbody&site=stackoverflow&key=Nq4apLl7jpfWZJUxaHLCnw%28%28&q=";let n=yield fetch(t+encodeURIComponent(e.text.split(/\W/).join(" OR "))),o=(yield n.json()).items;o=o.map(e=>({title:e.title,link:e.link,id:e.question_id,body:e.body,owner:e.owner})),function(e,t){const n=document.getElementById("templates"),o=n.getElementsByClassName("stackex-question")[0];let r=document.getElementById("stackex-questions");for(;r.hasChildNodes();)r.removeChild(r.lastChild);t||0!==e.length||r.appendChild(n.getElementsByClassName("no-results")[0].cloneNode(!0));console.log(e),e.map(e=>{const t=o.cloneNode(!0);var n;t.getElementsByClassName("stackex-question-title")[0].textContent=e.title,t.getElementsByClassName("query-headline")[0].innerHTML=e.body.substr(0,400),t.getElementsByClassName("stackex-question-title")[0].setAttribute("href",e.link),r.appendChild(t),n=t,Array.from(n.getElementsByTagName("pre")).forEach(e=>{l.default.highlightBlock(e)})})}(o)}catch(e){console.log(e);const t=document.getElementById("templates");let n=document.getElementById("stackex-questions"),o=t.getElementsByClassName("error")[0].cloneNode(!0);for(o.textContent=e.message;n.hasChildNodes();)n.removeChild(n.lastChild);n.appendChild(o)}}))}s.onsubmit=function(e){return r.__awaiter(this,void 0,void 0,(function*(){e.preventDefault(),i()}))},null===(o=document.getElementById("ec-query"))||void 0===o||o.addEventListener("paste",e=>i()),document.getElementById("muse-query").focus()},,function(e,t,n){},function(e,t,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,